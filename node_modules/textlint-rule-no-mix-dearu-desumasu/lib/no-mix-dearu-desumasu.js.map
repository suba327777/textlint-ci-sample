{"version":3,"file":"no-mix-dearu-desumasu.js","names":["Object","defineProperty","exports","value","PreferTypes","_textlintRuleHelper","require","_BodyMixedChecker","_interopRequireDefault","_HeaderMixedChecker","_ListMixedChecker","obj","__esModule","default","DESUMASU","DEARU","defaultOptions","preferInHeader","preferInBody","preferInList","strict","allowedTypes","assertPreferOption","preferType","includes","Error","concat","map","type","module","noMixedDearuDesumasu","context","options","arguments","length","undefined","Syntax","getSource","helper","RuleHelper","ignoreManager","IgnoreNodeManager","isStrict","bodyChecker","BodyMixedChecker","preferDesumasu","preferDearu","headerChecker","HeaderMixedChecker","listChecker","ListMixedChecker","Header","node","text","check","ListItem","Paragraph","ignoredNodeTypes","Link","Code","Image","BlockQuote","Emphasis","isChildNode","ignoreChildrenByTypes","Document","Promise","all","checkout"],"sources":["../src/no-mix-dearu-desumasu.js"],"sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport { RuleHelper, IgnoreNodeManager } from \"textlint-rule-helper\";\nimport BodyMixedChecker from \"./BodyMixedChecker\";\nimport HeaderMixedChecker from \"./HeaderMixedChecker\";\nimport ListMixedChecker from \"./ListMixedChecker\";\n\nexport const PreferTypes = {\n    DESUMASU: \"ですます\",\n    DEARU: \"である\"\n};\n// デフォルトでその項目で多く出現している方を優先します。\n// 明示的にpreferの設定した場合は、そちらを優先した内容をエラーとして表示します。\nconst defaultOptions = {\n    preferInHeader: \"\", // \"である\" or \"ですます\"\n    preferInBody: \"\", // \"である\" or \"ですます\"\n    preferInList: \"\", // \"である\" or \"ですます\"\n    // 文末以外でも、敬体(ですます調)と常体(である調)を厳しくチェックするかどうか\n    strict: false\n};\n\nconst allowedTypes = [/*auto*/ \"\", PreferTypes.DESUMASU, PreferTypes.DEARU];\nconst assertPreferOption = (preferType) => {\n    if (!preferType) {\n        return;\n    }\n    if (!allowedTypes.includes(preferType)) {\n        throw new Error(`preferInHeader, preferInBody, preferInList は ${allowedTypes.map((type) => {\n            return `\"${type}\"`;\n        })} のどれかである必要があります。 \n\n実際の値: \"${preferType}\"`);\n    }\n};\n\nmodule.exports = function noMixedDearuDesumasu(context, options = defaultOptions) {\n    const { Syntax, getSource } = context;\n    const helper = new RuleHelper(context);\n    const ignoreManager = new IgnoreNodeManager();\n    const isStrict = options.strict !== undefined ? options.strict : defaultOptions.strict;\n    assertPreferOption(options.preferInHeader);\n    assertPreferOption(options.preferInBody);\n    assertPreferOption(options.preferInList);\n    const bodyChecker = new BodyMixedChecker(context, {\n        preferDesumasu: options.preferInBody === PreferTypes.DESUMASU,\n        preferDearu: options.preferInBody === PreferTypes.DEARU,\n        isStrict\n    });\n    const headerChecker = new HeaderMixedChecker(context, {\n        preferDesumasu: options.preferInHeader === PreferTypes.DESUMASU,\n        preferDearu: options.preferInHeader === PreferTypes.DEARU,\n        isStrict\n    });\n    const listChecker = new ListMixedChecker(context, {\n        preferDesumasu: options.preferInList === PreferTypes.DESUMASU,\n        preferDearu: options.preferInList === PreferTypes.DEARU,\n        isStrict\n    });\n    return {\n        // 見出し\n        [Syntax.Header](node) {\n            const text = getSource(node);\n            headerChecker.check(node, text);\n        },\n        // 箇条書き\n        [Syntax.ListItem](node) {\n            const text = getSource(node);\n            listChecker.check(node, text);\n        },\n        // 本文\n        [Syntax.Paragraph](node) {\n            const ignoredNodeTypes = [Syntax.Link, Syntax.Code, Syntax.Image, Syntax.BlockQuote, Syntax.Emphasis];\n            // 無視リストのTypeが親にある場合は無視する\n            if (helper.isChildNode(node, ignoredNodeTypes)) {\n                return;\n            }\n            // 見出しと箇条書きは別途チェックするので Header > Str などは無視する\n            if (helper.isChildNode(node, [Syntax.Header, Syntax.ListItem])) {\n                return;\n            }\n            // childrenに無視するtypeがいた場合は無視リストに加える\n            ignoreManager.ignoreChildrenByTypes(node, ignoredNodeTypes);\n            // check\n            const text = getSource(node);\n            bodyChecker.check(node, text);\n        },\n        [Syntax.Document + \":exit\"]() {\n            return Promise.all([\n                bodyChecker.checkout(ignoreManager),\n                headerChecker.checkout(ignoreManager),\n                listChecker.checkout(ignoreManager)\n            ]);\n        }\n    };\n};\n"],"mappings":"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"}